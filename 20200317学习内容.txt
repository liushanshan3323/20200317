### GIT版本管理工具
#### 1.为什么要使用版本管理工具
- 历史版本备份：能够进行有效的备份和还原到历史的某个备份版本
- 团队协作开发：解决团队协作开发中的合并和冲突处理
- ...

常用的版本控制工具
- git：分布式版本管理工具（>=90%）
- svn：集成式版本管理工具

#### 2.安装GIT
操作系统
- windows  微软
- mac（os） 苹果
- linux 服务器端
- ...

GIT是linux创始人研发的工具，所以GIT中的操作大部分都是linux操作命令
- https://git-scm.com GIT官网中提供的安装包，本身就把linux的模拟环境和git集成打包在一起了，只要按照这个安装完成，非linux系统中也能正常的基于linux命令操作git了

#### 3.GIT分布式版本管理系统  VS  SVN集中式版本管理系统
作业：git 和 svn 的区别

#### 电脑扫盲
1. 启动windows操作命令（DOS命令）
> win + R   => 出现运行窗口 => 在窗口中输入 cmd  => 打开DOS窗口  （在默认的目录中打开）

2. 配置电脑的系统环境变量
> 在某些命令不能使用的情况下，我们基于系统环境变量的配置，可以使用命令


=====================
初次安装使用GIT，需要在本地配置一下GIT的基本信息（操作GIT的用户信息）
```
查看本地的GIT全局配置
$ git config -l  （字母L）
   =>user.name
   =>user.email
   =>如果信息特别多的情况下，我们看不全，一路ENTER键，知道END为止；再次输入 :wq  保存退出查看即可；

配置一下用户名和邮箱（建议用户名和邮箱跟GIT-HUB中注册的账号保持一致）
https://github.com
$ git config --global user.name 'xxx'
$ git config --global user.email 'xxx'

查看是否配置成功
$ git config --global user.name或者user.email，只要能有信息，说明配置成功，否则配置失败，重新配置一下（这个步骤很重要，后期提交都历史区的时候，需要知道谁提交的，此处必须注明本地的用户信息）
```

========================
$ git init  创建仓库
$ git status  查看文件的状态
  =>红色 代表当前文件处于工作区，还没有提交到暂存区
  =>绿色 代表当前文件处于暂存区，还没有提交到历史区
$ git add <file>  把指定的文件从工作区提交到暂存区
  => $ git add .  或者  $ git add -A 把所有工作区最新修改的文件，都提交到暂存区
$ git commit -m'备注信息'    （-m和备注信息之间没有空格的）  把暂存区中的信息提交到历史区，生成一个历史版本
  => $ git log 查看本地历史版本信息
  => $ git reflog 在log的基础上增加历史回滚的信息
$ git reset --hard 版本号 （选取版本号的前7位即可）  回滚到指定的历史版本（把指定历史版本中的信息，替换工作区内容）

$ git rm --cached <file> 删除传递到暂存区中的信息（只是从暂存区移除了，工作区还是有的，这个操作很少用）

========================
团队协作开发中，为了实现代码的相互共享，我们需要建立中央服务器（中央仓库）
=>每个开发者都把代码同步到中央仓库中
=>也随时从中央仓库拉取最新的代码
=>问题：分支、合并代码、冲突处理

真实项目中，中央仓库都是公司自己内部的服务器创建的（内网访问），也有公司是基于开源的平台创建中央仓库（私有化的仓库，指定参与者）
=>github 权威
=>gitee 码云
=>coding
=>...

https://github.com/

1.在GITHUB中创建中央仓库
https://github.com/zhouxiaotian/20200317.git  我的仓库GIT地址 （用户名/仓库名.git）

2.把本地仓库中的信息同步（推送和拉取）到中央远程仓库上
 A：和远程仓库建立连接
   $ git remote -v  查看本地仓库和哪些远程仓库保持联系
   $ git remote add 连接名字（一般都叫做origin） 远程仓库地址    和远程仓库保持连接
   $ git remote remove 连接名字

 B：把本地仓库中的信息同步到（推送到）远程仓库
   =>推送的信息是本地“历史区”中的信息（包括所有版本信息），所以推送之前，需要先把工作区中的信息增加到历史区才可以  $ git add -A  然后  $ git commit -m''
   $ git push origin（关联时候取的名字） master
	  => 在弹出的用户名密码框中，分别输入 github 的账号和密码
	  => 有的电脑第一次输入成功后会保存下来，下一次就无需重新输入了
   
   $ git pull origin master
      => 推送之前最好先拉取远程仓库中的信息

-----------
$ git clone 远程仓库地址  别名    把远程仓库克隆到本地
   -> 创建一个文件夹“起的别名”
   -> git init  本地创建一个仓库
   -> git remote add origin 地址   和克隆的远程仓库默认关联
   -> git pull origin master  把现有远程仓库中的信息拉取到本地